//
//  ShoppinglistsListView.swift
//  WorkshopShoppingList
//
//  Created by Vladimir Vinakheras on 30.11.2024.
//

import SwiftUI
import Combine

struct ShoppinglistsListView: View {
    @ObservedObject var viewModel: ShoplistsScreenViewModel
    @State private var showSheet = false
    @State private var selectedItem: String?
    @State private var selectedEmojis: [String: String] = [:]
    @State private var doneItems: [String: Bool] = [:]

    let items = ["–ü–æ–¥–∞—Ä–∫–∏", "–ï–¥–∞", "–û–¥–µ–∂–¥–∞"]
    let emojis = ["üõí", "üéÅ", "üíù", "üçΩÔ∏è", "ü•¶", "üçé", "üçå", "ü•©", "üßÄ", "üçû", "ü•õ", "ü•ö", "üçó", "üçö", "ü•ó", "ü•î", "ü•ï", "üåΩ", "ü•ú", "üçá", "üç§", "ü•§", "üß¥", "üßπ", "ü™£", "üßΩ", "ü™ú", "üßº", "üß∫", "üõèÔ∏è", "ü™û", "ü™ë", "üëó", "üëñ", "üëï", "üß¢", "üë†", "üëú", "üß•", "üß§", "üß¶", "üëì", "üì±", "üíª", "üéß", "üì∑", "üñ®Ô∏è", "üñ•Ô∏è", "üéÆ"]

    var body: some View {
        ScrollView {
            VStack(spacing: 8) {
                ForEach(viewModel.shoppingLists, id: \.self) { list in
                    let name = list.name ?? "Sin nombre"
                    HStack {
                        Button(action: {
                            doneItems[name] = !(doneItems[name] ?? false)
                        }) {
                            Image(systemName: doneItems[name] ?? false ? "checkmark.circle.fill" : "circle")
                                .foregroundColor(doneItems[name] ?? false ? .green : .blue)
                                .padding(.trailing, 10)
                        }
                        .contentShape(Rectangle())

                        Button(action: {
                            if !showSheet {
                                selectedItem = name
                                showSheet = true
                            }
                        }) {
                            Text(selectedEmojis[name] ?? "üõí")
                                .font(.largeTitle)
                        }
                        .contentShape(Rectangle())
                        
                        Text(name)
                            .font(.headline)
                            .strikethrough(doneItems[name] ?? false)
                            .foregroundColor(doneItems[name] ?? false ? .gray : .primary)
                            .padding(.leading, 10)

                        Spacer()
                    }
                    .padding()
                    .background(Color(UIColor.systemGroupedBackground))
                    .cornerRadius(10)
                }
            }
            .padding()
        }
    }
}

//–ü–æ—á—Ç–∏ —Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ EmojiGridView –Ω–æ –≤ –∫–æ–Ω—Ü–µ –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–∏–Ω–µ–Ω–∏–∏
struct EmojiGridSheet: View {
    let emojis: [String]
    let onEmojiSelected: (String) -> Void

    let columns = [
        GridItem(.adaptive(minimum: 40))
    ]

    var body: some View {
        VStack {
            Text("Selecciona un emoji")
                .font(.headline)
                .padding()

            LazyVGrid(columns: columns, spacing: 20) {
                ForEach(emojis, id: \.self) { emoji in
                    Button(action: {
                        onEmojiSelected(emoji)
                    }) {
                        Text(emoji)
                            .font(.largeTitle)
                    }
                }
            }
            .padding()

            Spacer()
        }
        .presentationDetents([.medium])  //–†–∞–∑–º–µ—Ä –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω —ç–∫—Ä–∞–Ω–∞
        .presentationDragIndicator(.visible)  //–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–æ—Å–∫—É –Ω–∞ –≤–µ—Ä–∑–Ω—ã–π –∫—Ä–∞–π sheet'–∞
    }

}

#Preview {
    ShoppinglistsListView(viewModel: ShoplistsScreenViewModel())
}
